case class Pos(x: Int, y: Int)

    case class Color(r: Int, g: Int, b: Int) {}

    trait Pixel {
      val id: Int
      val pos: Pos
    }

    class RGBPixel(color: Color, val id: Int, val pos: Pos) extends Pixel {
      override def toString: String =
        s"RGBPixel id: $id | x ${pos.x} , y ${pos.y} | (${color.r} ${color.g} ${color.b})"
    }

    class TransparentPixel(color: Color, val id: Int, alpha: Int, val pos: Pos) extends Pixel {
      override def toString: String =
        s"TransparentPixel id: $id | x ${pos.x} , y ${pos.y} | (${color.r} ${color.g} ${color.b} ${alpha})"
    }

    val screen =
      """|0:100,125, 56,200
         |1:255,  0,  0
         |2:  0,135,200
         |3:220, 12,  0,100
         |4: 45, 97,  0
         |5:  0,  0,  0
         |6:  0,  0,  0,0
         |7:  0,  0,  0
         |8:255,255,255
         |""".stripMargin.split("\n")

    val pixels = screen.foldLeft(List[Pixel]()) { (list, line) =>
      line.toString.replace(" ","").trim match {
        case s"$id:$r,$g,$b,$a" => list :+ new TransparentPixel(Color(r.toInt: Int, g.toInt: Int, b.toInt: Int), id.toInt, a.toInt: Int, Pos(id.toInt%3: Int,id.toInt/3: Int))
        case s"$id:$r,$g,$b" => list :+ new RGBPixel(Color(r.toInt: Int, g.toInt: Int, b.toInt: Int), id.toInt, Pos(id.toInt%3: Int, id.toInt/3: Int))
        case _ => list
      }
    }
    pixels.foreach(println)